usethis::use_vignette("my-vignette")
devtools::document()
devtools::install()
install()
devtools::load_all(".")
devtools::install()
library(htmltools)
install.packages("htmltools")
install.packages("processx")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
library(spvcm)
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::load_all(".")
library(spvcm)
library(spvcm)
spvcm
devtools::load_all(".")
devtools::document()
devtools::build()
library(spvcm)
roxygen2::roxygenise()
devtools::document()
devtools::load_all()
use_description(fields = list(), check_name = TRUE, roxygen = TRUE)
devtools::create("spvcm")
usethis::use_package("package")
library(devtools)
devtools::document()
devtools::document()
usethis::use_latest_dependencies(overwrite = TRUE, source = "CRAN")
document()
update_collate()
roxygen2::update_collate()
roxygen2::update_collate(getwd())
devtools::install_deps()
document()
document()
usethis::use_tidy_description()
document()
use_package()
roxygen2::update_collate()
roxygen2::update_collate(getwd())
devtools::install_github("markusdumke/pkghelper")
library(pkghelper)
# Get names of packages my package depends on
get_dependencies()
#> [1] "desc"     "devtools" "magrittr" "purrr"    "stringr"
# Modify DESCRIPTION
write_dependencies()
document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
library(spvcm)
library(spvcm)
library(spvcm)
library(spvcm)
library(spvcm)
library(spvcm)
devtools::load_all(".")
library(spvcm)
devtools::load_all(".")
library(spvcm)
library(spvcm)
devtools::load_all(".")
library(spvcm)
devtools::document()
test<- c(1,1,1,2,2,2,2,5,5,7,7,4,2,2,4,4,5)
sort(test, decreasing = F)
test[order(test)]
frequency(test)
table(test)
abc <- table(test)[1:5]
print(abc)
abc[1]
abc[1] + 1
as.integer
as.integer(abc)
test[order(test)]
inverse_order <- function(x, order){
for (i in 1:length(x)){
out[order[i]]<- x[i]
}
return(out)
}
inverse_order(sort(test), order(test))
### Inverse function to recover the original vector x from sort(x) and order(x)
inverse_order <- function(x, order){
output <- vector("numeric", length(x))
for (i in 1:length(x)){
output[order[i]]<- x[i]
}
return(output)
}
inverse_order(sort(test), order(test))
test
dim(x)
dim(test)
is.vector(test)
is.matrix(test)
is.array(test)
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
library(SparsePVCM)
library(parallelly)
library(future.apply)
devtools::load_all(".")
devtools::document()
library(SparsePVCM)
K_h(1:10, 3)
K_h <- function(t, h){
a <- t/h
b <- 1-(a^2)
b[ b<=0] <- 0
res <- 0.75 * b / h
return(res)
}
K_h(1:10, 3)
devtools::load_all(".")
library(SparsePVCM)
predict_SparsePVCM
devtools::load_all(".")
library(SparsePVCM)
library(SparsePVCM)
### 1. Prepare the yeat real data
data(yeast)
## Time series response variable
y_sample <- c( t(yeast$y) )
n <- length(y_sample)
## Standardize and expand predictor matrix for each response value
X_std <- scale( yeast$x )
n_gene <- dim(X_std)[1]
p <- dim(X_std)[2]
X_sample <- matrix(NA, n, p )
for(i in 1:n_gene){
temp <-  matrix( rep(X_std[i,], 18), 18, p, byrow = T)
X_sample[ ( 1 + 18 * (i-1)):(18 * i), ] <- temp
}
X_sample <- cbind( rep(1, n), X_sample)
colnames(X_sample) <- c("intercept", colnames(yeast$x))
## 18 equally spaced time points (0 - 119 minutes)
U_sample <- rep(seq(0,119,length.out= 18), n_gene )
# ### 2. Fit SPVCM
start.time <- Sys.time()
SparsePVCM_fit <-  SparsePVCM(y_sample, X_sample, U_sample,num_tun_1 = 6, num_tun_2 = 6)
end.time <- Sys.time()
end.time - start.time
SparsePVCM_rsqd <- 1- sum(( y_sample - SparsePVCM_fit$y_fitted)^2) / sum(( y_sample - mean(y_sample)  )^2)
# 0.2994799
cat(length(SparsePVCM_fit$X_selected), " predictors are selected with rank ", SparsePVCM_fit$rank,"\n")
# ### 2. Fit SPVCM
start.time <- Sys.time()
SparsePVCM_fit <-  SparsePVCM(y_sample, X_sample, U_sample,num_tun_1 = 20, num_tun_2 = 20)
end.time <- Sys.time()
end.time - start.time
SparsePVCM_rsqd <- 1- sum(( y_sample - SparsePVCM_fit$y_fitted)^2) / sum(( y_sample - mean(y_sample)  )^2)
# 0.2994799
cat(length(SparsePVCM_fit$X_selected), " predictors are selected with rank ", SparsePVCM_fit$rank,"\n")
warnings()
SparsePVCM_rsqd <- 1- sum(( y_sample - SparsePVCM_fit$y_fitted)^2) / sum(( y_sample - mean(y_sample)  )^2)
SparsePVCM_rsqd
end.time - start.time
# 0.2994799
sum(( y_sample - SparsePVCM_fit$y_fitted)^2) / n
locat_true <- c(T, T, F, F, F, F, F, F, T, F, T, F, F, F, F, F, F, F,F, F,T, T, F, F, F, F, T, T, T, F, F,
F, F, F, F, F, F, F, F, F, F ,F, F, F, F, T, F, F, F, F, T, T, T, F, F, F, F, F, F, F, T,
F, F, F, F, F, F, F, F, T, F, F,
F, F, F, F, F, F, F, F, F, F, F, T, F, F, F, T, T, F, F, F, T, T, T, F, F, F, F ,F, F, F,F, F, F,F)
sum(SparsePVCM_fit$nonzero_index)
sum(SparsePVCM_fit$nonzero_index[-1] == locat_true)
sum(SparsePVCM_fit$nonzero_index[-1] == locat_true) / 106
SparsePVCM_fit$nonzero_index[-1] * locat_true
sum(SparsePVCM_fit$nonzero_index[-1] * locat_true)
SparsePVCM_fit$D
sum(SparsePVCM_fit$nonzero_index[-1])
set("C:/Users/jgong/Documents")
setwd("C:/Users/jgong/Documents")
saveRDS(SparsePVCM_fit, "insample_SparsePVCM_fit.rds")
library(SparsePVCM)
Acc_pvcm <- sum( SparsePVCM_fit$nonzero_index[-1] == locat_true ) /106 # Except intercept
Acc_pvcm
MSE_insample
MSE_insample[3] <- sum(( y_sample - SparsePVCM_fit$y_fitted)^2) / n
sum(( y_sample - SparsePVCM_fit$y_fitted)^2) / n
1- sum(( y_sample - SparsePVCM_fit$y_fitted)^2) / sum(( y_sample - mean(y_sample)  )^2)
Acc_pvcm <- sum( SparsePVCM_fit$nonzero_index[-1] == locat_true ) /106 # Except intercept
MSE_pvcm <- sum(( y_sample - SparsePVCM_fit$y_fitted)^2) / n
Rsqrd_pvcm <- 1- sum(( y_sample - SparsePVCM_fit$y_fitted)^2) / sum(( y_sample - mean(y_sample)  )^2)
print(MSE_pvcm, Rsqrd_pvcm, Acc_pvcm)
print(c(MSE_pvcm, Rsqrd_pvcm, Acc_pvcm))
